Instruction,Description,Operation,Type,opcode,f3,f7
"lb rd, (rs1)",load byte,rd = address,I,3,0,0
"lb rd, imm(rs1)",load byte,rd = address,I,3,0,1
"lb rd, symbol",load byte,rd = address,I,3,0,2
"lh rd, (rs1)",load half word,rd = address,I,3,1,0
"lh rd, imm(rs1)",load half word,rd = address,I,3,1,1
"lh rd, symbol",load half word,rd = address,I,3,1,2
"lw rd, (rs1)",load word,rd = address,I,3,2,0
"lw rd, imm(rs1)",load word,rd = address,I,3,2,1
"lw rd, symbol",load word,rd = address,I,3,2,2
"addi rd, rs1, imm",add immediate,rd = rs1 + imm,I,19,0,-
"slli rd, rs1, imm",shift left logical immediate,rd = rs1 << imm,I,19,1,-
"slti rd, rs1, imm",set less than immediate,if (rs1 < imm) rd = 1 else rd = 0,I,19,2,-
"sltiu rd, rs1, imm",set les than immediate unsigned,if (|rs1| < |imm|) rd = 1 else rd =0,I,19,3,-
"xori rd, rs1, imm",xor immediate,rd = rs1 ^ imm,I,19,4,-
"srli rd, rs1, imm",shift right logical immediate,rd = rs1 >> imm,I,19,0,-
"srai rd, rs1, imm",shift right arithmetic immediate,rd = rs1 >>> imm,I,19,0,-
"ori rd, rs1, imm",or immediate,rd = rs1 | imm,I,19,6,-
"andi rd, rs1, imm",and immediate,rd = rs1 & imm,I,19,7,-
"sb rs2, (rs1)",store byte,address = rs2,S,35,0,0
"sb rs2, imm(rs1)",store byte,address = rs2,S,35,0,1
"sb rs2, symbol",store byte,address = rs2,S,35,0,2
"sh rs2, (rs1)",store half word,address = rs2,S,35,1,0
"sh rs2, imm(rs1)",store half word,address = rs2,S,35,1,1
"sh rs2, symbol",store half word,address = rs2,S,35,1,2
"sw rs2, (rs1)",store word,address = rs2,S,35,2,0
"sw rs2, imm(rs1)",store word,address = rs2,S,35,2,1
"sw rs2, symbol",store word,address = rs2,S,35,2,2
"add rd, rs1, rs2",add,rd = rs1 + rs2,R,51,0,0
"sub rd, rs1, rs2",sub,rd = rs1 - rs2,R,51,0,32
"sll rd, rs1, rs2",shift left logical,rd = rs1 << rs2,R,51,1,0
"slt rd, rs1, rs2",set less than,if (rs1 < rs2) rd = 1 else rd = 0,R,51,2,0
"sltu rd, rs1, rs2",set less than unsigned,if (|rs1| < |rs2|) rd = 1 else rd = 0,R,51,3,0
"xor rd, rs1, rs2",xor,rd = rs1 ^ rs2,R,51,4,0
"srl rd, rs1, rs2",shift right logical,rd = rs1 >> rs2,R,51,5,0
"sra rd, rs1, rs2",shift right arithmetic,rd = rs1 >>> rs2,R,51,5,32
"or rd, rs1, rs2",or,rd = rs1 | rs2,R,51,6,0
"and rd, rs1, rs2",and,rd = rs1 & rs2,R,51,7,0
"mul rd, rs1, rs2",multiply,rd = rs1 * rs2,R,51,0,1
"div rd, rs1, rs2",divide signed,rd = rs1 / rs2,R,51,4,1
"divu rd, rs1, rs2",divide unsigned,rd = rs1 / rs2,R,51,5,1
"rem rd, rs1, rs2",remainder signed,rd = rs1 % rs2,R,51,6,1
"remu rd, rs1, rs2",remainder unsigned,rd = rs1 % rs2,R,51,7,1
"beq rs1, rs2, label",branch if equal,if(rs1==rs2) pc=pc+addr(label),B,99,0,-
"bne rs1, rs2, label",branch if not equal,if(rs1!=rs2) pc=pc+addr(label),B,99,1,-
"blt rs1, rs2, label",branch if less than,if(rs1<rs2) pc=pc+addr(label),B,99,4,-
"bge rs1, rs2, label",branch if greater equal than,if(rs1>=rs2) pc=pc+addr(label),B,99,5,-
"bltu rs1, rs2, label",branch if less than unsigned,if(rs1<rs2) pc=pc+addr(label),B,99,6,-
"bgeu rs1, rs2, label",branch if greater equal than unsigned,if(rs1>=rs2) pc=pc+addr(label),B,99,7,-
"jalr rd, rs1, imm",jump and link register,rd = pc + 4 & pc = rs1 + imm,I,103,-,-
"jal rd, label",jump and link,rd = pc + 4 & pc = addr(label),I,111,-,-
"nop",no operation,"addi x0, x0, 0",Pseudo,-,-,-
"li rd, imm",load immediate,"addi rd, x0, imm",Pseudo,-,-,-
"mv rd, rs1",move/copy,"addi rd, rs1,0",Pseudo,-,-,-
"not rd, rs1",one's complement,"xori rd, rs1, -1",Pseudo,-,-,-
"neg rd, rs1",two's complement,"sub rd, x0, rs1",Pseudo,-,-,-
"seqz rd, rs1",set if equal 0,"sltiu rd, rs1, 1",Pseudo,-,-,-
"snez rd, rs1",set if not equal 0,"sltu rd, x0, rs1",Pseudo,-,-,-
"sltz rd, rs1",set if less than 0,"slt rd, rs1, x0",Pseudo,-,-,-
"sgtz rd, rs1",set if greater than 0,"slt rd, x0, rs1",Pseudo,-,-,-
"la rd, symbol",load address of global var,rd = symbol address,Pseudo,-,-,-
"beqz rs1, label",branch if equal 0,"beq rs1, x0, label",Pseudo,-,-,-
"bnez rs1, label",branch if not equal 0,"bne rs1, x0, label",Pseudo,-,-,-
"blez rs1, label",branch if less equal than 0,"bge x0, rs1, label",Pseudo,-,-,-
"bgez rs1, label",branch if greater equal than 0,"bge rs1, x0, label",Pseudo,-,-,-
"bltz rs1, label",branch if less than 0,"blt rs1, x0, label",Pseudo,-,-,-
"bgtz rs1, label",branch if greater than 0,"blt x0, rs1, label",Pseudo,-,-,-
"ble rs1, rs2, label",branch if less equal than,"bge rs2, rs1, label",Pseudo,-,-,-
"bgt rs1, rs2, label",branch if greater than,"blt rs2, rs1, label",Pseudo,-,-,-
"bleu rs1, rs2, label",branch if less equal than unsigned,"bgeu rs2, rs1, label",Pseudo,-,-,-
"bgtu rs1, rs2, label",branch if greater than unsigned,"bltu rs2, rs1, label",Pseudo,-,-,-
"j label",jump,"jal x0, label",Pseudo,-,-,-
"jal label",jump and link,"jal ra, label",Pseudo,-,-,-
"jr rs1",jump register,"jalr x0, rs1, label",Pseudo,-,-,-
"jalr rs1",jump and link register,"jal ra, rs1, 0",Pseudo,-,-,-
"ret",return from function,"jalr x0, ra, 0",Pseudo,-,-,-
"call label",call function,"jal ra, label",Pseudo,-,-,-
"ecall",transfer control to OS,"ecall",Privileged,-,-,-
